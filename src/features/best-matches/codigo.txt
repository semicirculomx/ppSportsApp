import React from 'react'
import { useState, useRef } from 'react'
import { Modal, Media, Alert, ProgressBar, Form, Row, Col, InputGroup, Button } from 'react-bootstrap'
import { useHistory, useLocation } from 'react-router-dom'
import { Typeahead } from 'react-bootstrap-typeahead'

import 'react-bootstrap-typeahead/css/Typeahead.css'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faImage } from '@fortawesome/free-regular-svg-icons/faImage'

import { useSelector, useDispatch } from 'react-redux'
import { composePostAndPick } from 'features/posts/postsSlice'
import TextEditor from 'comps/TextEditor.js'
import { useEffect } from 'react'

import { fetchLeagueMatches, getSportsData, selectApiSports, selectLeagueMatches } from 'features/picks/picksSlice'
import Slip from 'comps/Slip'
// import Autocomplete from 'comps/autocomplete'

import { addBestMatch } from 'features/best-matches/bmSlice'

import 'emoji-mart/css/emoji-mart.css'
import DOMPurify from 'dompurify'
import { filterInput, dateConverter, findLongestMarketsArray } from 'utils/helpers'

export default props => {
    let location = useLocation()
    let history = useHistory()
    let dispatch = useDispatch()

    let { user } = useSelector(state => state.auth)
    let { api_sports_status: apiStatus } = useSelector(state => state.picks)
    let apiSports = useSelector(selectApiSports)
    let leagueMatches = useSelector(selectLeagueMatches)

    // let formType = new URLSearchParams(location.search).get('type')  // 'pick' or 'post'
    const replyId = new URLSearchParams(location.search).get('reply_to')
    let type = props.type
    const betMarkets = ["Ganador", "Hándicap", "Total O/U", "Hándicap G", "Doble O", "BTTS", "Margen V", "1er tiempo", "Especiales", "Largo pl.", "Parlay", "En vivo", "Desc/Final", "1er anot.", "Tarjetas", "Posesión", "Esquina", "D.N.B.", "Exacto", "Intervalo"]
    let { compose_status: status } = useSelector(state => state.posts)
    let userBank = user.bank
    let ta = useRef(null)
    let unidad = useRef(250);
    let input_ref = useRef()
    let [market, setMarket] = useState('')
    let [odds, setOdds] = useState('')
    let [stake, setStake] = useState('')
    let [match, setMatch] = useState(null)
    let [profit, setProfit] = useState(0)
    let [pick_title, setPickTitle] = useState('')
    const [height, setHeight] = useState('auto')
    const [editor_text, setText] = useState(``)
    const [active, setActive] = useState(false)
    let [sport, setSport] = useState(null) // sport id
    let [matchTitle, setMatchTitle] = useState('') // competition
    let [bets, setBets] = useState([]) // competition
    const [error, setError] = useState(null)
    let [base64Images, setImages] = useState([])
    let [htmlContent, setHtmlContent] = useState(null)
    let [initialContent, setInitialContent] = useState('Escribe aquí tus análisis y predicciones...')
    let [placeholder, setPlaceholder] = useState(true)
    let [bookmaker, setBookmaker] = useState(null)
    let [post_categories, setCategory] = useState([])

    let [progress, setProgress] = useState(0)

    const [totalOdds, setTotalOdds] = useState(0);
    const [totalPayout, setTotalPayout] = useState(0);

    function calculatePayout(bets, stake) {
        if(!bets.length) 
            return { totalOdds: 0, payout: 0 };
        // Convert stake to a float
        stake = parseFloat(stake);

        // Calculate the decimal odds and total odds for the parlay
        let decimalOdds = 1;
        for (let i = 0; i < bets.length; i++) {
            let americanOdds = parseFloat(bets[i].odds);

            decimalOdds *= americanOdds > 0 ? (americanOdds / 100) + 1 : (-100 / americanOdds) + 1;

        }
        let totalOdds = (decimalOdds - 1) * 100;

        // Calculate the parlay payout
        let payout = decimalOdds * stake;

        // Format the total odds and payout in American format
        let singleBetOdd = bets[0].odds;
        let totalOddsAmerican = totalOdds >= 0 ? `+${totalOdds.toFixed(0)}` : `-${Math.abs(totalOdds).toFixed(0)}`;
        let payoutAmerican = `$${payout.toFixed(2)}`;
        let payoutNumber = payout.toFixed(2)

        // Return an object with the total odds and payout in American format
        return { totalOdds: bets.length > 1 ? totalOddsAmerican : singleBetOdd, payout: payoutAmerican, payoutNumber: payoutNumber };
    }

    let dirtyProgress = () => {
        if (progress < 90)
            setTimeout(() => { setProgress(90) }, 200)
        return true
    }
    const handleClose = () => {
        if (status !== 'error' || true) {
            setError(null)
            history.goBack()
        }
    }
    const resizeTa = () => {
        if (ta.current) {
            // let height = ta.current.scrollHeight;
            // cur.height = 'auto';
            // cur.height = (cur.scrollHeight) + 'px';
            setHeight('auto')
        }
    }
    const addCategory = (newCategory) => {
        setCategory([...post_categories, newCategory]);
      };
    useEffect(() => {
        if (ta.current) {
            ta.current.focus()
            let height = ta.current.scrollHeight
            setHeight(height + 'px')
        }
    }, [editor_text])  
    
    useEffect(() => {
        if ((apiStatus === 'idle' || apiStatus === 'done') && !apiSports.length) {
            dispatch(getSportsData())
            // console.log('fetching on posts load, status:', status)
        }
    }, [apiStatus, apiSports, dispatch])

    const handleChange = e => {
        resizeTa()
        let text = e.target.value
        setText(text)
        setActive(DOMPurify.sanitize(text, { ALLOWED_TAGS: [] }).trim().length > 0)
    }

    /* Handle selected sport */
    const handleSelectSport = (selectedSport) => {
        if (selectedSport.length) {
            setSport(selectedSport[0])
            addCategory(selectedSport[0].group ? selectedSport[0].group : selectedSport[0].label)
            if (selectedSport[0].customOption) {
                dispatch(fetchLeagueMatches('upcoming'))
            } else {
                dispatch(fetchLeagueMatches(selectedSport[0].key))
            }
        }
    }

    const handleEditorContentChange = (htmlContent) => {
        resizeTa()
        let text = htmlContent.replace(/<[^>]+>/g, '');
        setText(text)
        setActive(DOMPurify.sanitize(text, { ALLOWED_TAGS: [] }).trim().length > 0)
        setHtmlContent(htmlContent);
        extractImages(htmlContent);
        placeholder && setPlaceholder(false);
    }

    const extractImages = (htmlContent) => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlContent, 'text/html');
        const base64Images = Array.from(doc.querySelectorAll('img')).map(img => img.src);

        setImages(base64Images);
    }

    /*Handle selected match */
    const handleSelectMatch = (e) => {
        setMatch(e[0])
        console.log(e[0])
        if (e.length > 0) {
            if (e[0].customOption) {
                setMatchTitle(e[0].label)
            } else {
                let selectedMatch = e[0]
                if (selectedMatch.bookmakers.length) {
                    setBookmaker(findLongestMarketsArray(selectedMatch.bookmakers))
                }
                setMatchTitle(selectedMatch.home_team + ' vs ' + selectedMatch.away_team)
            }
            setActive(true)
        }
    }

    /* Add a new bet function*/
    const addBetMatch = () => {
        if (sport && match && market && odds) {
            let matchBody = {
                home_team: match.home_team ? match.home_team : undefined,
                away_team: match.away_team ? match.away_team : undefined,
                commence_time: match.commence_time ? match.commence_time : undefined,
                sport: sport.group ? sport.group : sport.label,
                competition: match.sport_title ? match.sport_title : sport.title,
                match_id: !match.customOption ? match.id : `custom-${matchTitle}-${Date.now()}`,
                matchTitle,
                customOption: match.customOption ? match.customOption : false,
                bookmaker: bookmaker ? bookmaker : null,
            }
            let bet = {
                match: matchBody,
                market,
                odds,
            }
            setBets([...bets, bet])
            setMarket('')
            setOdds('')
            setMatchTitle('')
            setMatch(null)
            setSport(null)
            setBookmaker(null)
            

            const { totalOdds, payout, payoutNumber } = calculatePayout([...bets, bet], (stake * unidad.current));

            console.log('Total Odds:', totalOdds); // Total Odds: -0.61
            console.log('Total Payout:', payout); // Total Payout: 1030.82

            setTotalOdds(totalOdds)
            setTotalPayout(payout)
            setProfit(payoutNumber - (stake * unidad.current))
            console.log(bet)
        }
    }
    /* Remove a bet function */
    const handleRemove = (index) => {
        const updatedBets = bets.filter((bet, i) => i !== index);
        const { totalOdds, payout, payoutNumber } = calculatePayout([...updatedBets], (stake * unidad.current));
        console.log('trigger remove', totalOdds, totalPayout)
        setTotalOdds(totalOdds)
        setTotalPayout(payout)
        setProfit(payoutNumber - (stake * unidad.current))
        setBets(updatedBets);
    };

    /* Handle submit */
    const handleSubmit = async e => {
        if (!active) return;
        setActive(false);

        let body = {
            post: {},
            pick: {}
        };

        if (editor_text && !placeholder) {
            let text;
            let htmlSanitized;
            try {
                htmlSanitized = filterInput(htmlContent, 'html_strict', { max_length: 60000, identifier: 'Post' });
                text = filterInput(editor_text, 'text', { max_length: 60000, identifier: 'Post' });
            } catch (err) {
                setActive(true);
                return setError(err.message);
            }
            body.post = {
                text,
                post_title: pick_title,
                base64Images,
                htmlContent: htmlSanitized,
                post_categories

            };
        }

        if (bets.length > 0) {
            let pick = {
                bets,
                stake,
                pick_title,
                profit,
                lastUserBank: user.bank,
                totalOdds,
            };
            body.pick = pick;
        }

        console.log(body);
        let action = await dispatch(composePostAndPick({ body }))
        setActive(true);
        if (action.type === 'posts/composePostAndPick/fulfilled') handleClose();
    }

    /* Handle submit best match */
    const submitMatch = async e => {
        if (!active) return

        setActive(false)

        let matchBody = {
            home_team: match.home_team ? match.home_team : undefined,
            away_team: match.away_team ? match.away_team : undefined,
            commence_time: match.commence_time ? match.commence_time : undefined,
            sport: sport.group ? sport.group : sport.label,
            competition: match.sport_title ? match.sport_title : sport.title,
            match_id: !match.customOption ? match.id : `custom-${matchTitle}-${Date.now()}`,
            matchTitle,
            is_value_match: true,
            customOption: match.customOption ? match.customOption : false,
            bookmaker: bookmaker ? bookmaker : null,

        }

        let body = {
            match: matchBody,
        }
        let action = await dispatch(addBestMatch({ body }))
        setActive(true)
        if (action.type === 'bm/addBestMatch/fulfilled') handleClose()

    }

    return (
        <>
            <Modal
                className="p-0"
                size="lg"
                scrollable={true}
                show={true}
                onHide={handleClose}
                backdrop="static"
                keyboard={false}
            >
                <Modal.Header closeButton className="py-2">
                    <Modal.Title>
                        <small className="font-weight-bold">
                            {replyId ? 'Responde' : 'Envía tu pick'}
                        </small>
                    </Modal.Title>
                </Modal.Header>
                {status === 'pending' && dirtyProgress() && (
                    <ProgressBar className="rounded-0" now={progress} />
                )}
                {status === 'error' && (
                    <Alert variant="danger" className="font-weight-bold text-white">
                        Error al crear tu post, intenta de nuevo!
                    </Alert>
                )}
                {error && (
                    <Alert variant="danger" className="font-weight-bold text-white">
                        {error}
                    </Alert>
                )}
                <Modal.Body className="retroForm">
                    <Media className="h-100 w-100">
                        <Media.Body className="h-100 w-50" style={{ minHeight: '175px' }}>
                            <Form ref={input_ref} onSubmit={e => e.preventDefault()}>
                                {type !== 'partido' && (
                                    <>
                                        <Form.Group controlId="eventName">
                                            <Form.Control
                                                placeholder="Título del pick"
                                                type="text"
                                                value={pick_title}
                                                onChange={n => setPickTitle(n.target.value)}
                                                required/>
                                        </Form.Group>
                                    </>
                                )}

                                        {apiSports.length > 0 && (
                                            <Form.Group controlId="sport">
                                                <Typeahead
                                                    clearButton
                                                    allowNew={true}
                                                    newSelectionPrefix="No está? Agrega uno..😁: "
                                                    id="sport-typeahead"
                                                    onChange={handleSelectSport}
                                                    labelKey={(option) => `${option.title} - ${option.group}`}
                                                    options={apiSports}
                                                    placeholder="Elige un deporte..."
                                                    selected={sport ? [sport] : []}
                                                />
                                            </Form.Group>
                                        )}
                                {type !== 'analisis' && (
                                    <>
                                        {sport && (
                                            <Form.Group controlId="match">
                                                <Typeahead
                                                    clearButton
                                                    allowNew={true}
                                                    newSelectionPrefix="No está? Agrega uno..😁: "
                                                    id="match-typeahead"
                                                    onChange={handleSelectMatch}
                                                    labelKey={(option) => `${option.home_team} - ${option.away_team} | ${dateConverter(option.commence_time)}`}
                                                    options={leagueMatches}
                                                    placeholder="Selecciona un partido..."
                                                    selected={match ? [match] : []}
                                                />
                                            </Form.Group>
                                        )}
                                        <hr />

                                        {type === 'apuesta' && (
                                            <>
                                                <Form.Group controlId="matchTitle">
                                                    <Form.Control
                                                        placeholder="Título de apuesta"
                                                        type="text"
                                                        value={matchTitle}
                                                        onChange={(e) => setMatchTitle(e.target.value)} />
                                                </Form.Group>

                                                <Form.Group controlId="market">
                                                    <Typeahead
                                                        clearButton
                                                        allowNew={true}
                                                        newSelectionPrefix="No está? Agrega uno..😁: "
                                                        id="market-typeahead"
                                                        onChange={mercado => !mercado[0]?.customOption ? setMarket(mercado[0]) : setMarket(mercado[0].label)}
                                                        options={betMarkets}
                                                        placeholder="Elige un tipo de mercado..."
                                                        selected={market ? [market] : []}
                                                    />
                                                </Form.Group>
                                                <Row>
                                                    <Col>
                                                        <Form.Group className="mr-2" controlId="marketOdds">
                                                            <Form.Control
                                                                placeholder="Cuota"
                                                                type="number"
                                                                value={odds}
                                                                onChange={n => setOdds(n.target.value)}
                                                            />
                                                        </Form.Group>
                                                    </Col>
                                                    <Col>
                                                        <Form.Group className="ml-2" controlId="stake">
                                                            <Form.Control
                                                                placeholder="Unidades"
                                                                type="number"
                                                                value={stake}
                                                                onChange={n => setStake(n.target.value)}
                                                            />
                                                        </Form.Group>
                                                    </Col>
                                                </Row>

                                                <InputGroup className="">
                                                    <span>Momio total:</span>
                                                    <InputGroup.Text className="font-weight-bold">{totalOdds}</InputGroup.Text>
                                                </InputGroup>
                                                <InputGroup className="">
                                                    <span>Retorno:</span>
                                                    <InputGroup.Text className="font-weight-bold">{totalPayout}</InputGroup.Text>
                                                </InputGroup>
                                                <div className="custom-btn">
                                                    <Button 
                                                    className="font-weight-bold btn w-100 mb-3" 
                                                    onClick={addBetMatch}
                                                    disabled={!market || !odds || !stake || !matchTitle}
                                                    >Agregar</Button>
                                                </div>

                                            </>
                                        )}
                                    </>)}
                                <Slip bets={bets} onRemove={handleRemove} />

                                {type !== 'partido' && (
                                    <>
                                        <Form.Group className="w-100 p-0" controlId="analisis">
                                        <TextEditor style={{
                                                    height
                                                }} onContentChange={handleEditorContentChange}
                                                
                                                content={initialContent}/> 

                                        </Form.Group>
                                    </>
                                )}
                            </Form>
                        </Media.Body>
                    </Media>
                </Modal.Body>
                <Modal.Footer className="py-2">
                    <div className="d-flex w-100 justify-content-end align-items-center">
                        {/* <div style={{ fontSize: '1.5em' }}>
                            <button className="disabled text-primary btn btn-lg rounded-circle btn-naked-primary p-2">
                                <FontAwesomeIcon size="lg" icon={faImage} />
                            </button>
                        </div> */}
                        <div className="right custom-btn">
                            <button
                                onClick={type === 'partido' ? submitMatch : handleSubmit}
                                className="btn px-3 py-2 font-weight-bold"
                            >
                                Guardar
                            </button>
                        </div>
                    </div>
                </Modal.Footer>
            </Modal>
        </>
    )
}



I apologize for the error. Please allow me to provide a corrected version of the function:

scss
Copy code
function calculateParlay(bets) {
  let totalOdds = 1;
  let totalStake = 0;
  for (let i = 0; i < bets.length; i++) {
    let odds = parseFloat(bets[i].odds);
    if (odds > 0) {
      totalOdds *= (odds / 100) + 1;
    } else {
      totalOdds *= (-100 / odds) + 1;
    }
    totalStake += parseFloat(bets[i].stake);
  }
  const totalPayout = (totalOdds * totalStake).toFixed(2);
  const gainPercentage = ((totalPayout / totalStake - 1) * 100).toFixed(2);
  return { totalOdds: totalOdds.toFixed(2), totalPayout, gainPercentage: `${gainPercentage}%` };
}
This updated function should correctly handle negative odds as well.




Tianguisenlinea shop
example:
Sure, here's an example of how you could use the updated function with an array of bets that includes both positive and negative odds:

sql
Copy code
const bets = [
  { match: 'Tennis: Novak Djokovic vs Rafael Nadal', odds: '-130', market: 'Moneyline', stake: '50' },
  { match: 'Basketball: LA Lakers vs Boston Celtics', odds: '+220', market: 'Moneyline', stake: '25' },
  { match: 'Football: Manchester United vs Chelsea', odds: '-110', market: 'Point Spread', stake: '75' },
  { match: 'Baseball: New York Yankees vs Boston Red Sox', odds: '-155', market: 'Moneyline', stake: '100' },
];

const result = calculateParlay(bets);

console.log(result);
// Output: { totalOdds: '4.55', totalPayout: '464.07', gainPercentage: '352.85%' }
In this example, the bets array includes 4 different bets with various markets and stakes. The calculateParlay function is used to calculate the total odds, total payout, and gain percentage for this parlay bet. The resulting object shows that the total odds are 4.55, the total payout is $464.07, and the gain percentage is 352.85%.




Tianguisenlinea shop
example with -120 and -150 odds
Sure, here's an example with -120 and -150 odds:

javascript
Copy code
const bets = [
  {match: 'match1', odds: '-120', market: 'tipo de mercado 1'}, 
  {match: 'match2', odds: '-150', market: 'tipo de mercado 2'}
];

function calculateParlay(bets, wager) {
  let totalOdds = 1;
  let totalPayout = 0;

  bets.forEach((bet) => {
    totalOdds *= parseFloat(bet.odds) < 0 ? (-100 / parseFloat(bet.odds)) : (parseFloat(bet.odds) / 100);
  });

  totalPayout = (totalOdds * wager).toFixed(2);

  const gainPercentage = ((totalPayout - wager) / wager) * 100;

  return { totalOdds, totalPayout, gainPercentage };
}

console.log(calculateParlay(bets, 50));
The output will be:

yaml
Copy code
{ totalOdds: 2.13, totalPayout: '106.50', gainPercentage: 113 }
So if you bet $50 on this parlay, the potential payout is $106.50 with a gain percentage of 113%.
//////////////////////
how to use the function to calculate and show for each bet added to the array of bets. The payout will automatically be calculated each time a new bet is added to de array of bets. 

-bets is in the state

Here is an example of how to use the function to calculate the payout for each bet added to the array of bets:

jsx
Copy code
import React, { useState } from "react";
import calculatePayout from "./calculatePayout";

function App() {
  const [bets, setBets] = useState([]);

  // function to add a new bet to the array
  const addBet = (newBet) => {
    setBets([...bets, newBet]);
  };

  // function to remove a bet from the array
  const removeBet = (index) => {
    const updatedBets = [...bets];
    updatedBets.splice(index, 1);
    setBets(updatedBets);
  };

  // calculate the payout for each bet
  const payouts = bets.map((bet) => calculatePayout(bet.odds));

  // calculate the total odds and total payout
  const totalOdds = payouts.reduce((acc, cur) => acc * cur, 1);
  const totalPayout = 100 * totalOdds;

  return (
    <div>
      <h2>Bet List</h2>
      <ul>
        {bets.map((bet, index) => (
          <li key={index}>
            <span>{bet.match}</span>
            <span>{bet.market}</span>
            <span>{bet.odds}</span>
            <span>Payout: {payouts[index]}</span>
            <button onClick={() => removeBet(index)}>Remove</button>
          </li>
        ))}
      </ul>

      <h2>Total Odds: {totalOdds}</h2>
      <h2>Total Payout: ${totalPayout}</h2>

      <form
        onSubmit={(e) => {
          e.preventDefault();
          const newBet = {
            match: e.target.match.value,
            market: e.target.market.value,
            odds: e.target.odds.value,
          };
          addBet(newBet);
          e.target.reset();
        }}
      >
        <input type="text" name="match" placeholder="Match" required />
        <input type="text" name="market" placeholder="Market" required />
        <input type="text" name="odds" placeholder="Odds" required />
        <button type="submit">Add Bet</button>
      </form>
    </div>
  );
}

export default App;
In this example, we first define the addBet and removeBet functions to add and remove bets from the array.

We then use the map function to iterate over the bets array and calculate the payout for each bet using the calculatePayout function.

We then calculate the totalOdds by multiplying all the payouts together and calculate the totalPayout by multiplying the totalOdds by 100.

Finally, we render the list of bets, the total odds, and the total payout using JSX. We also define a form to add new bets to the array. When the form is submitted, we create a new bet object and add it to the array using the addBet function.

import React from 'react'
import { useState, useRef } from 'react'
import { Modal, Media, Alert, ProgressBar, Form, Row, Col } from 'react-bootstrap'
import { useHistory, useLocation } from 'react-router-dom'

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'

import { useSelector, useDispatch } from 'react-redux'
import { addBestMatch } from './bmSlice'
import { useEffect } from 'react'

import { fetchLeagueMatches, selectApiSports,selectLeagueMatches } from 'features/picks/picksSlice'

import { filterInput, dateConverter } from 'utils/helpers'

export default props => {
    let location = useLocation()
    let history = useHistory()
    let dispatch = useDispatch()

    let { user } = useSelector(state => state.auth);

    let  apiSports = useSelector(selectApiSports)
    let leagueMatches = useSelector(selectLeagueMatches)

    let { best_match_added: status } = useSelector(state => state.picks)
   
    let [home_team, setHomeTeam] = useState('')
    let [away_team, setAwayTeam] = useState('')
    let [match, setMatch] = useState(null)
    let [pick_title, setPickTitle] = useState('')
    const [active, setActive] = useState(false)
    let [sport, setSport] = useState(null) // sport id
    const [commence_time, setCommenceTime] = useState(null)
    let [competition, setCompetition] = useState(null) // competition    

    const [error, setError] = useState(null)

    let [progress, setProgress] = useState(10)


    let dirtyProgress = () => {
        // if (progress < 90)
        //     setTimeout(() => { setProgress(90) }, 200)
        return true
    }
    const handleClose = () => {
        if (status !== 'error' || true) {
            history.goBack();
        }
    }

    let handleChange = e => {
        let text = e.target.value
    }

    let handleSelect = e => {
            const selectedSport = apiSports.find(
            s => s.key === e.target.value
            );
             setSport(selectedSport)
             dispatch(fetchLeagueMatches(selectedSport.key))
          
        }
     let handleSelectMatch = e => {
        const selectedMatch = leagueMatches.find(
        match => match.id === e.target.value
        );
            setMatch(selectedMatch)
            setHomeTeam(selectedMatch.home_team)
            setAwayTeam(selectedMatch.away_team)
            setCommenceTime(selectedMatch.commence_time)
            setCompetition(selectedMatch.sport_title)
            console.log(selectedMatch)
    }
    
    let handleSubmit = async (e) => {
        if (!active)
            return;
        try {
        } catch (err) {
            return setError(err.message)
        }
        setActive(false)
        let pickMatch = {home_team,
                    away_team,
                    pick_title,
                    commence_time,
                    competition,}
        let body = {
            pick: pickMatch,
            is_pick: false
        }
        let url;
        let action = await dispatch(addBestMatch({ body, url }))
        setActive(true)
        if (action.type === 'bm/addBestMatch/fulfilled')
            handleClose()
    }

    return (
        <>
            <Modal
                className="p-0"
                size="lg"
                scrollable={true}
                show={true}
                onHide={handleClose}
                backdrop="static"
                keyboard={false}
            >
                <Modal.Header closeButton className="py-2">
                    <Modal.Title><small className="font-weight-bold">
                        {'Agrega partido'}
                    </small></Modal.Title>
                </Modal.Header>
                {status === 'pending' && (
                    dirtyProgress() &&
                    <ProgressBar className="rounded-0" now={progress} />
                )}
                {status === "error" && (
                    <Alert variant="danger" className="font-weight-bold text-white">
                        Error submiting post, try again!
                    </Alert>
                )}
                {error && (
                    <Alert variant="danger" className="font-weight-bold text-white">
                        {error}
                    </Alert>
                )}
                  <Modal.Body className="pt-1 pb-0">
                    <Media className='h-100 w-100'>
                      
                        <Media.Body className="h-100 w-50" style={{ minHeight: '175px' }}>
                            <Form onSubmit={(e)=> e.preventDefault()}>
                                <Form.Group controlId="sport">
                                             <Form.Control 
                                                placeholder="Deportes y ligas"
                                                as="select" 
                                                value={sport ? sport.key : ''}
                                                onChange={handleSelect}
                                                >
                                                <option value="">Lista de deportes</option>
                                                {apiSports.map((m, index) => (
                                                    <option key={index} value={m.key}>{m.group} - {m.title}</option>
                                                ))}
                                            </Form.Control>
                                </Form.Group>      
                                <Form.Group controlId="match">
                                           
                                           <Form.Control 
                                                placeholder="Partidos de hoy"
                                                as="select" 
                                                value={match ? match.id : ''}
                                                onChange={handleSelectMatch}
                                                >
                                                <option value="">Lista de partidos</option>
                                                {leagueMatches.map((m, index) => (
                                                    <option key={m.id} value={m.id}>{m.home_team} - {m.away_team} | {dateConverter(m.commence_time)}</option>
                                                ))}
                                            </Form.Control>
                                </Form.Group>    
                                <Form.Group controlId="eventName">
                                        <Form.Control
                                            placeholder="Nombre del evento"
                                            style={{ fontSize: '1.25rem' }}
                                            type="text"
                                            value={pick_title}
                                            onChange={n => setPickTitle(n.target.value)}
                                        />
                                    </Form.Group>
                                </Form>
                        </Media.Body>
                    </Media>
                </Modal.Body>
            </Modal>
        </>
    );
}

// import React from 'react'
// import { useEffect, useCallback } from 'react'
// import Heading from 'comps/Heading'
// import { Link } from 'react-router-dom'
// import { Row, Col, Figure } from 'react-bootstrap'
// import MultiMedia from 'comps/MultiMedia'
// import { useSelector, useDispatch } from 'react-redux'
// import { selectPickById, getPick, selectReplies, getReplies } from './picksSlice'

// import { numFormatter } from 'utils/helpers'
// import ScrollToTop from 'comps/ScrollToTop'
// import ReactionsBar from './ReactionsBar'
// import PickText from 'comps/PickText'
// import QuotedPick from 'comps/quoted-pick'
// import UserLink from 'comps/user-link'
// import Spinner from 'comps/Spinner'
// import PicksList from 'comps/PicksList'

// export default props => {
//     let { match: { params: { pickId } = {} } = {} } = props
//     let dispatch = useDispatch()
//     let pick = useSelector(state => selectPickById(state, pickId))
//     const replies = useSelector(state => selectReplies(state, pickId))
//     let { pick_detail_status: status, pick_replies_status } = useSelector(state => state.picks)
    
//     useEffect(() => {
//         if (!pick)
//             dispatch(getPick(pickId))
//     }, [pick, pickId, dispatch])

//     const getPicks = useCallback(() => {
//         dispatch(getReplies(pickId))
//     }, [dispatch, pickId])

//     if (status === 'loading')
//         return <Spinner />
//     if (!pick) {
//         return <div className="message font-weight-bold">Pick not Found</div>
//     }
    
//     return (<>
//         <ScrollToTop />
//         <Heading backButton title="Pick" />
//         <Col className="p-3 d-flex flex-column">
//             <Row>
//                 <Row>
//                     <UserLink
//                         user={pick.user}
//                         className="rounded-circle"
//                         to={`/user/${pick.user.screen_name}`}
//                     >
//                         <Figure
//                             className="bg-border-color rounded-circle mr-2 overflow-hidden"
//                             style={{ height: "50px", width: "50px" }}
//                         >
//                             <Figure.Image
//                                 src={(pick.user.default_profile_image) ? '/img/default-profile-vector.svg' : pick.user.profile_image_url_https}
//                                 className="w-100 h-100"
//                             />
//                         </Figure>
//                     </UserLink>
//                     <Col className="d-flex flex-column">
//                         <UserLink
//                             user={pick.user}
//                             to={`/user/${pick.user.screen_name}`}
//                             className="text-dark font-weight-bold mr-1">
//                             {pick.user.name}
//                         </UserLink>
//                         {/* tick */}
//                         <span className="text-muted mr-1">@{pick.user.screen_name}</span>
//                     </Col>
//                 </Row>
//                 <Row></Row>
//             </Row>
//             <Row>
//                 <span className="text-muted pb-2">
//                     {new Date(pick.created_at).toLocaleTimeString()}
//                     {" - "}
//                     {new Date(pick.created_at).toDateString()}
//                 </span>
//             </Row>
//             <Row className="border-top border-bottom d-flex p-2">
//                 <div className="py-1 pr-3">
//                     <span className="font-weight-bold mr-1">{numFormatter(pick.favorite_count)}</span>
//                     <Link to={`/pick/${pick.id_str}/likes`} className="text-muted">Likes</Link>
//                 </div>
//                 <div className="py-1 pr-3">
//                     <span className="font-weight-bold mr-1">{numFormatter(pick.retweet_count)}</span>
//                     <Link to={`/pick/${pick.id_str}/repicks`} className="text-muted">Repicks</Link>
//                 </div>
//             </Row>
//             <Row className="d-flex justify-content-end align-items-center mt-2 border-bottom">
//                 <ReactionsBar pick={pick} />
//             </Row>
//             <PicksList
//                 no_reply_tag
//                 picks={replies}
//                 status={pick_replies_status}
//                 getPicks={getPicks}
//             />
//         </Col>
//     </>)
// }